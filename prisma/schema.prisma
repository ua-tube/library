generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Creator {
  id                 String              @id @db.Uuid
  displayName        String              @map("display_name")
  nickname           String
  thumbnailUrl       String?             @map("thumbnail_url")
  playlists          Playlist[]
  videos             Video[]
  likedPlaylist      LikedPlaylist?
  dislikedPlaylist   DislikedPlaylist?
  watchLaterPlaylist WatchLaterPlaylist?

  @@map("creators")
}

model Video {
  id                      String                   @id @db.Uuid
  creatorId               String                   @map("creator_id") @db.Uuid
  creator                 Creator                  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  title                   String
  thumbnailUrl            String?                  @map("thumbnail_url")
  previewThumbnailUrl     String?                  @map("preview_thumbnail_url")
  lengthSeconds           Int                      @map("length_seconds")
  visibility              VideoVisibility
  status                  VideoStatus
  createdAt               DateTime                 @map("created_at") @db.Timestamptz(6)
  metrics                 VideoMetrics?
  playlistItems           PlaylistItem[]
  watchLaterPlaylistItems WatchLaterPlaylistItem[]
  likedPlaylistItems      LikedPlaylistItem[]
  dislikedPlaylistItems   DislikedPlaylistItem[]

  @@index([creatorId])
  @@index([visibility])
  @@index([creatorId, visibility])
  @@map("videos")
}

enum VideoStatus {
  Created
  Registered
  RegistrationFailed
  Unregistered

  @@map("video_statuses")
}

enum VideoVisibility {
  Private
  Unlisted
  Public

  @@map("video_visibilities")
}

model VideoMetrics {
  videoId             String    @id @default(uuid()) @map("video_id") @db.Uuid
  video               Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  viewsCount          BigInt    @default(0) @map("views_count")
  likesCount          BigInt    @default(0) @map("likes_count")
  dislikesCount       BigInt    @default(0) @map("dislikes_count")
  viewsCountUpdatedAt DateTime? @map("views_count_updated_at") @db.Timestamptz(6)

  @@index([viewsCount])
  @@index([likesCount])
  @@index([dislikesCount])
  @@map("video_metrics")
}

model Playlist {
  id              String             @id @default(uuid()) @db.Uuid
  creatorId       String             @map("creator_id") @db.Uuid
  creator         Creator            @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  title           String
  description     String?
  visibility      PlaylistVisibility
  createdAt       DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime           @updatedAt @map("updated_at") @db.Timestamptz(6)
  playlistItems   PlaylistItem[]
  playlistMetrics PlaylistMetrics?

  @@index([creatorId])
  @@index([creatorId, visibility])
  @@map("playlists")
}

model PlaylistMetrics {
  playlistId String   @id @map("playlist_id") @db.Uuid
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  viewsCount BigInt   @map("views_count")
  itemsCount Int      @map("items_count")

  @@map("playlist_metrics")
}

enum PlaylistVisibility {
  Private
  Unlisted
  Public

  @@map("playlist_visibilities")
}

model PlaylistItem {
  playlistId String   @map("playlist_id") @db.Uuid
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  videoId    String   @map("video_id") @db.Uuid
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@id([playlistId, videoId])
  @@map("playlists_items")
}

model LikedPlaylist {
  creatorId          String              @id @map("creator_id") @db.Uuid
  creator            Creator             @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  itemsCount         Int                 @map("items_count")
  likedPlaylistItems LikedPlaylistItem[]

  @@map("liked_playlists")
}

model LikedPlaylistItem {
  likedPlaylistId String        @map("liked_playlist_id") @db.Uuid
  LikedPlaylist   LikedPlaylist @relation(fields: [likedPlaylistId], references: [creatorId], onDelete: Cascade)
  videoId         String        @map("video_id") @db.Uuid
  video           Video         @relation(fields: [videoId], references: [id])

  @@id([likedPlaylistId, videoId])
  @@map("liked_playlists_items")
}

model DislikedPlaylist {
  creatorId             String                 @id @map("creator_id") @db.Uuid
  creator               Creator                @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  itemsCount            Int                    @map("items_count")
  dislikedPlaylistItems DislikedPlaylistItem[]

  @@map("disliked_playlists")
}

model DislikedPlaylistItem {
  dislikedPlaylistId String           @map("disliked_playlist_id") @db.Uuid
  dislikedPlaylist   DislikedPlaylist @relation(fields: [dislikedPlaylistId], references: [creatorId], onDelete: Cascade)
  videoId            String           @map("video_id") @db.Uuid
  video              Video            @relation(fields: [videoId], references: [id])

  @@id([dislikedPlaylistId, videoId])
  @@map("disliked_playlists_items")
}

model WatchLaterPlaylist {
  creatorId               String                   @id @map("creator_id") @db.Uuid
  creator                 Creator                  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  itemsCount              Int                      @map("items_count")
  watchLaterPlaylistItems WatchLaterPlaylistItem[]

  @@map("watch_later_playlists")
}

model WatchLaterPlaylistItem {
  watchLaterPlaylistId String             @map("watch_later_playlist_id") @db.Uuid
  watchLaterPlaylist   WatchLaterPlaylist @relation(fields: [watchLaterPlaylistId], references: [creatorId], onDelete: Cascade)
  videoId              String             @map("video_id") @db.Uuid
  video                Video              @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@id([watchLaterPlaylistId, videoId])
  @@map("watch_later_playlists_items")
}
